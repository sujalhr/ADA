#include <stdio.h>

int min(int a, int b) {
    return (a < b) ? a : b;
}

void floyds(int p[10][10], int n) {
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j)
                    p[i][j] = 0;
                else
                    p[i][j] = min(p[i][j], p[i][k] + p[k][j]);
            }
        }
    }
}

int main() {
    int p[10][10], w, n, e, u, v;

    printf("Enter the number of vertices: ");
    scanf("%d", &n);

    printf("Enter the number of edges: ");
    scanf("%d", &e);

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            p[i][j] = 999;
        }
    }

    for (int i = 0; i < e; i++) {
        printf("Enter the end vertices of edge %d with its weight: ", i + 1);
        scanf("%d %d %d", &u, &v, &w);
        p[u][v] = w;
    }

    printf("Matrix of input data:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", p[i][j]);
        }
        printf("\n");
    }

    floyds(p, n);

    printf("Transitive closure:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            printf("%d\t", p[i][j]);
        }
        printf("\n");
    }

    printf("The shortest paths are:\n");
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            if (i != j) {
                printf("<%d,%d> = %d\n", i, j, p[i][j]);
            }
        }
    }

    return 0;
}
