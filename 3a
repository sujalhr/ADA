#include <stdio.h>

int min(int a, int b) {
    if (a < b)
        return a;
    else
        return b;
}

void floyds(int p[10][10], int n) {
    for (int k = 0; k < n; k++) {
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j)
                    p[i][j] = 0;
                else
                    p[i][j] = min(p[i][j], p[i][k] + p[k][j]);
            }
        }
    }
}

int main() {
    int p[10][10], w, n, e, u, v, i, j;

    printf("\nEnter the number of vertices: ");
    scanf("%d", &n);

    printf("\nEnter the number of edges:\n");
    scanf("%d", &e);

    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            p[i][j] = 999;
    }

    for (i = 0; i < e; i++) {
        printf("\nEnter the end vertices of edge%d with its weight\n", i + 1);
        scanf("%d %d %d", &u, &v, &w);
        p[u][v] = w;
    }

    printf("\nMatrix of input data:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            printf("%d\t", p[i][j]);
        printf("\n");
    }

    floyds(p, n);

    printf("\nTransitive closure:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++)
            printf("%d\t", p[i][j]);
        printf("\n");
    }

    printf("\nThe shortest paths are:\n");
    for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
            if (i != j)
                printf("\n<%d,%d>=%d", i, j, p[i][j]);
        }
    }

    return 0;
}
