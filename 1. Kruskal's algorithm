#include <stdio.h>
#include <stdlib.h>

#define MAX_EDGES 1000
#define MAX_VERTICES 100

typedef struct {
    int src, dest, weight;
} Edge;

Edge edges[MAX_EDGES];
int parent[MAX_VERTICES];
int V, E;

int find(int i) {
    while (parent[i] != i)
        i = parent[i];
    return i;
}

void union_set(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

int compare(const void* a, const void* b) {
    return ((Edge*)a)->weight - ((Edge*)b)->weight;
}

void kruskalMST() {
    qsort(edges, E, sizeof(Edge), compare);

    for (int i = 0; i < V; i++)
        parent[i] = i;

    printf("Minimum Spanning Tree:\n");
    for (int i = 0, e = 0; i < E && e < V - 1; i++) {
        int x = find(edges[i].src);
        int y = find(edges[i].dest);

        if (x != y) {
            printf("(%d, %d) -> %d\n", edges[i].src, edges[i].dest, edges[i].weight);
            union_set(x, y);
            e++;
        }
    }
}

int main() {
    printf("Enter number of vertices and edges: ");
    scanf("%d %d", &V, &E);

    printf("Enter edges and their weights:\n");
    for (int i = 0; i < E; i++)
        scanf("%d %d %d", &edges[i].src, &edges[i].dest, &edges[i].weight);

    kruskalMST();
    return 0;
}
